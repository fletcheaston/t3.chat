// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch";

import { client as _heyApiClient } from "./client.gen";
import type {
    CreateConversationData,
    CreateConversationErrors,
    CreateConversationResponses,
    CreateMessageData,
    CreateMessageErrors,
    CreateMessageResponses,
    GenerateShareLinkData,
    GenerateShareLinkResponses,
    GithubCallbackData,
    GithubCallbackErrors,
    GithubCallbackResponses,
    GlobalSyncBootstrapData,
    GlobalSyncBootstrapResponses,
    GlobalSyncTypesData,
    GlobalSyncTypesResponses,
    JoinConversationData,
    JoinConversationErrors,
    JoinConversationResponses,
    ListMyConversationsData,
    ListMyConversationsResponses,
    ListMyMessagesData,
    ListMyMessagesResponses,
    LogoutData,
    LogoutResponses,
    PreviewConversationData,
    PreviewConversationResponses,
    UpdateConversationData,
    UpdateConversationResponses,
    UpdateMySettingsData,
    UpdateMySettingsResponses,
    WhoAmIData,
    WhoAmIErrors,
    WhoAmIResponses,
} from "./types.gen";

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Who Am I
 */
export const whoAmI = <ThrowOnError extends boolean = false>(
    options?: Options<WhoAmIData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<WhoAmIResponses, WhoAmIErrors, ThrowOnError>({
        url: "/api/auth/whoami",
        ...options,
    });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
    options?: Options<LogoutData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        url: "/api/auth/logout",
        ...options,
    });
};

/**
 * Github Callback
 */
export const githubCallback = <ThrowOnError extends boolean = false>(
    options: Options<GithubCallbackData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GithubCallbackResponses,
        GithubCallbackErrors,
        ThrowOnError
    >({
        url: "/api/auth/github-callback",
        ...options,
    });
};

/**
 * List My Messages
 */
export const listMyMessages = <ThrowOnError extends boolean = false>(
    options?: Options<ListMyMessagesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<ListMyMessagesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/messages/list",
        ...options,
    });
};

/**
 * Create Message
 */
export const createMessage = <ThrowOnError extends boolean = false>(
    options: Options<CreateMessageData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        CreateMessageResponses,
        CreateMessageErrors,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/messages/create",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * List My Conversations
 */
export const listMyConversations = <ThrowOnError extends boolean = false>(
    options?: Options<ListMyConversationsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        ListMyConversationsResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/list",
        ...options,
    });
};

/**
 * Create Conversation
 */
export const createConversation = <ThrowOnError extends boolean = false>(
    options: Options<CreateConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        CreateConversationResponses,
        CreateConversationErrors,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/create",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Preview Conversation
 * Get basic conversation details from a shared link token.
 */
export const previewConversation = <ThrowOnError extends boolean = false>(
    options: Options<PreviewConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        PreviewConversationResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/share/preview",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Join Conversation
 * Join a conversation using a share link.
 */
export const joinConversation = <ThrowOnError extends boolean = false>(
    options: Options<JoinConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        JoinConversationResponses,
        JoinConversationErrors,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/share/join",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Generate Share Link
 * Generate a shareable link for a conversation.
 */
export const generateShareLink = <ThrowOnError extends boolean = false>(
    options: Options<GenerateShareLinkData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        GenerateShareLinkResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/share/{conversation_id}",
        ...options,
    });
};

/**
 * Update Conversation
 */
export const updateConversation = <ThrowOnError extends boolean = false>(
    options: Options<UpdateConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).patch<
        UpdateConversationResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/update/{conversation_id}",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Update My Settings
 */
export const updateMySettings = <ThrowOnError extends boolean = false>(
    options: Options<UpdateMySettingsData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).patch<
        UpdateMySettingsResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/settings/update",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Global Sync Types
 */
export const globalSyncTypes = <ThrowOnError extends boolean = false>(
    options?: Options<GlobalSyncTypesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<GlobalSyncTypesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/sync",
        ...options,
    });
};

/**
 * Global Sync Bootstrap
 */
export const globalSyncBootstrap = <ThrowOnError extends boolean = false>(
    options?: Options<GlobalSyncBootstrapData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GlobalSyncBootstrapResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/sync/bootstrap",
        ...options,
    });
};
